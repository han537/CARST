#!/usr/bin/python

# processModisNTI.py
#	Takes lat/lon volcano positions and georefereneced MODIS files and finds maximum NTI values for band 21 and band 22, outputs these to text files, also creates grid for each volcano-NTI pair
#	NOTE: georefeferenced MODIS files must be readable by GDAL
# Author: Andrew Kenneth Melkonian
# All rights reserved

# USAGE
# *****
# python processModisNTI volc_list_path input_data_dir output_data_dir latlon_range
#	"volc_list_path" is the path to a 2-column, space-separated file that specifies volcano locations, containing latitudes in the first column and longitudes in the second
#	"input_data_dir" is the directory containing the georeferenced MODIS input files, having a prefix assigned to variable "PREFIX" and extension assigned to variable "EXTENSION" (see below)
#	"output_data_dir" is where all files and directories generated by the script will be placed
#	"latlon_range" is the box size (in degrees) that will be generated for each volcano, if not provided the default is "0.1"


import os;
import re;
import subprocess;



def processModisNTI(volc_list_path, input_data_dir, output_data_dir, latlon_range):


	# Set prefix and extension to determine valid georeferenced MODIS files

	PREFIX    = "geo_";
	EXTENSION = "img";

	# Check that "volc_list_path" and "input_data_dir" exist

	assert os.path.exists(sys.argv[1]), "\n***** ERROR: " + sys.argv[1] + " does not exist\n";
	assert os.path.exists(sys.argv[2]), "\n***** ERROR: " + sys.argv[1] + " does not exist\n";

	# Search for georeferenced MODIS input files:

	contents = os.listdir(input_data_dir);
	modis_files = [item for item in contents if (re.search("^" + PREFIX + ".*\." + EXTENSION + "$",item) and not (item.find("band") > -1 or item.find("nti") > -1))];

	assert len(modis_files) > 0, "\n***** ERROR: No valid georeferenced MODIS files found (\"" + PREFIX + "*\." + EXTENSION + "\") in " + input_data_dir + "\n";
	
	# Create output_data_dir if it does not already exist:

	if not os.path.exists(output_data_dir):
		print("\n\"" + output_data_dir + "\" does not exist, creating...\n");
		os.mkdir(output_data_dir);

	# Create band 21 and band 22 NTI for each georeferenced MODIS file (if necessary)

	for modis in modis_files:

		band21 = output_data_dir + "/" + modis[ : modis.rfind("." + EXTENSION)] + "_band21.img";

		if not os.path.exists(output_data_dir + "/" + band21):
			cmd = "\ngdal_translate -of ENVI -b 2 " + input_data_dir + "/" + modis + " " + band21 + "\n";
			subprocess.call(cmd,shell=True);

		band22 = output_data_dir + "/" + modis[ : modis.rfind("." + EXTENSION)] + "_band22.img";

		if not os.path.exists(output_data_dir + "/" + band22):
			cmd = "\ngdal_translate -of ENVI -b 3 " + input_data_dir + "/" + modis + " " + band22 + "\n";
			subprocess.call(cmd,shell=True);

		band32 = output_data_dir + "/" + modis[ : modis.rfind("." + EXTENSION)] + "_band32.img";

		if not os.path.exists(output_data_dir + "/" + band32):
			cmd = "\ngdal_translate -of ENVI -b 12 " + input_data_dir + "/" + modis + " " + band32 + "\n";
			subprocess.call(cmd,shell=True);

		nti21 = output_data_dir + "/" + modis[ : modis.rfind("." + EXTENSION)] + "_nti21.img"; 

		if not os.path.exists(nti21):
			cmd = "\ngdal_calc.py -A " + band21 + " -B " + band32 + " --format=ENVI --NoDataValue=-9999 --outfile=" + nti21 + " --calc=\"(A-B)/(A+B)\"\n";
			subprocess.call(cmd,shell=True);

		nti22 = output_data_dir + "/" + modis[ : modis.rfind("." + EXTENSION)] + "_nti22.img"; 

		if not os.path.exists(nti22):
			cmd = "\ngdal_calc.py -A " + band22 + " -B " + band32 + " --format=ENVI --NoDataValue=-9999 --outfile=" + nti22 + " --calc=\"(A-B)/(A+B)\"\n";
			subprocess.call(cmd,shell=True);

	# Put NTI files into list

	contents = os.listdir(output_data_dir);
	ntis = [item for item in contents if re.search("nti\d\d\.img$",item)];

	# Run through volcano lat/lons and cut out latlon_range by latlon_range degree box, find maximum NTI, print julian day, max NTI, output to appropriate NTI text file

	infile = open(volc_list_path,"r");

	outfile_nti21 = open(output_data_dir + "/ntis21.txt","w");
	outfile_nti22 = open(output_data_dir + "/ntis22.txt","w");

	outfile_nti21.write("Year Julian_Day Max_NTI21_Value Volcano_Lat_Lon NTI_file\n");
	outfile_nti22.write("Year Julian_Day Max_NTI22_Value Volcano_Lat_Lon NTI_file\n");

	for line in infile:

		elements = line.split();

		lat = elements[0].strip();
		lon = elements[1].strip();

		ul_x = str(float(lon) - float(latlon_range));
		ul_y = str(float(lat) + float(latlon_range));
		lr_x = str(float(lon) + float(latlon_range));
		lr_y = str(float(lat) - float(latlon_range));

		R = "-R" + ul_x + "/" + lr_x + "/" + lr_y + "/" + ul_y;

		lat = lat.replace(".","_");

		if lat.find("-") > -1:
			lat = lat.replace("-","");
			lat = lat + "S";

		else:
			lat = lat + "N";

		lon = lon.replace(".","_");

		if lon.find("-") > -1:
			lon = lon.replace("-","");
			lon = lon + "W";

		else:
			lon = lon + "E";

		# Specify, create (if necessary) separate directory for each volcano in the list

		vdir = output_data_dir + "/Volcano_" + lat + "_" + lon;

		if not os.path.exists(vdir):
			os.mkdir(vdir);

		# Go through all NTI files, save grid surrounding current volcano in that volcano's directory (if the grid has data)

		for nti in ntis:

			cmd  = "\ngdalinfo " + output_data_dir + "/" + nti + "\n";
			pipe = subprocess.Popen(cmd,shell=True,stdout=subprocess.PIPE).stdout;
                        info = pipe.read().strip();
                        pipe.close();

			nti_ul_x = info[re.search("Upper Left\s*\(\s*",info).end(0) : re.search("Upper Left\s*\(\s*\-*\d+\.*\d*",info).end(0)];
			nti_ul_y = info[re.search("Upper Left\s*\(\s*\-*\d+\.*\d*,\s*",info).end(0) : re.search("Upper Left\s*\(\s*\-*\d+\.*\d*,\s*\-*\d+\.*\d*",info).end(0)];
			nti_lr_x = info[re.search("Lower Right\s*\(\s*",info).end(0) : re.search("Lower Right\s*\(\s*\-*\d+\.*\d*",info).end(0)];
			nti_lr_y = info[re.search("Lower Right\s*\(\s*\-*\d+\.*\d*,\s*",info).end(0) : re.search("Lower Right\s*\(\s*\-*\d+\.*\d*,\s*\-*\d+\.*\d*",info).end(0)];

			# Skip if volcano box is entirely outside NTI bounds

			if float(lr_x) < float(nti_ul_x) or float(lr_y) > float(nti_ul_y) or float(ul_x) > float(nti_lr_x) or float(ul_y) < float(nti_lr_y):
				continue;

			output_grd_path = vdir + "/" + nti[ : nti.rfind(".img")] + "_cut.grd";

			# Create box from NTI surrounding volcano

			if not os.path.exists(output_grd_path):
				cmd  = "\ngdal_translate -of ENVI -a_nodata -9999 -projwin " + ul_x + " " + ul_y + " " + lr_x + " " + lr_y + " " + output_data_dir + "/" + nti + " temp\n";
				cmd += "\ngdal_translate -of GMT -a_nodata -9999 temp " + output_grd_path + "\n";
				cmd += "\nrm temp*\n";
				subprocess.call(cmd,shell=True);

			# Get julian day from MODIS filename

			year = nti[nti.find("KM.A") + 4 : nti.find("KM.A") + 8];
			jday = nti[nti.find("KM.A") + 8 : nti.find("KM.A") + 11]; 

			# Find maximum NTI value in box surrounding volcano for current NTI file

			cmd  = "\ngrdinfo " + output_grd_path + "\n";
			pipe = subprocess.Popen(cmd,shell=True,stdout=subprocess.PIPE).stdout;
			info = pipe.read().strip();
			pipe.close();

			zmax = info[re.search("z_max:\s*",info).end(0) : re.search("z_max:\s*\S*\s*",info).end(0)].strip();

			# Output data to appropriate NTI output file if there is valid NTI value, otherwise remove the grid box for this NTI/volcano pair from the current volcano's directory

			if zmax != "0":

				if nti.find("nti21") > -1:
					outfile_nti21.write(year + " " + jday + " " + zmax + " " + vdir + " " + nti + "\n");

				elif nti.find("nti22") > -1:
					outfile_nti22.write(year + " " + jday + " " + zmax + " " + vdir + " " + nti + "\n");

			else:
				os.remove(output_grd_path);

				if os.path.exists(output_grd_path + ".aux.xml"):
					os.remove(output_grd_path + ".aux.xml");

	outfile_nti21.close();
	outfile_nti22.close();
	infile.close();

	return;



if __name__ == "__main__":
	
	import os;
	import sys;

	
	assert len(sys.argv) > 3, "\n***** ERROR: processModisNTI.py requires at least 3 arguments, " + str(len(sys.argv)) + " given\n";
	assert os.path.exists(sys.argv[1]), "\n***** ERROR: " + sys.argv[1] + " does not exist\n";
	assert os.path.exists(sys.argv[2]), "\n***** ERROR: " + sys.argv[1] + " does not exist\n";

	latlon_range = "0.1";

	if len(sys.argv) < 5:
		print("\n***** WARNING: argument \"latlon_range\" not given, using 0.1 by 0.1 degrees\n");
	
	else:
		latlon_range = sys.argv[4];	

	processModisNTI(sys.argv[1], sys.argv[2], sys.argv[3], latlon_range);

	exit();


